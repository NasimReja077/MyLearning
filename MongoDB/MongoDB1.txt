üß© 1. Database
A MongoDB database is a container for collections, much like a database in MySQL or PostgreSQL. Each database holds its own collections and documents.

üîπ Key Points:
One MongoDB server can host multiple databases.

Each database is independent of others.

MongoDB creates the database when you first store data in it.

üìå Syntax:
javascript
Copy
Edit
use myDatabase
This command switches to or creates a database named myDatabase.

üìö 2. Collection
A collection is a group of MongoDB documents, similar to a table in a relational database.

üîπ Key Points:
A collection exists within a database.

Collections hold documents (not rows).

Documents inside a collection can have different fields and structures (unlike SQL tables).

üìå Syntax:
javascript
Copy
Edit
db.createCollection("users")
This creates a new collection named users.

OR simply:

javascript
Copy
Edit
db.users.insertOne({ name: "Nasim" })
This creates the users collection if it doesn‚Äôt exist and inserts a document into it.

üìÑ 3. Document
A document is the basic unit of data in MongoDB. It‚Äôs a JSON-like object (BSON ‚Äì Binary JSON) that stores data in key-value pairs.

üîπ Key Points:
Each document is like a row in a table.

Documents are schema-less, meaning fields can vary from document to document.

Each document must have a unique _id field (automatically generated if not provided).

üìå Example:
json
Copy
Edit
{
  "_id": ObjectId("64ee2a7e2fcf7123abc12345"),
  "name": "Nasim",
  "age": 23,
  "skills": ["MongoDB", "React", "Node.js"]
}
üìå Insert Document:
javascript
Copy
Edit
db.users.insertOne({
  name: "Nasim",
  age: 23,
  skills: ["MongoDB", "React"]
})
üß† Summary Table:
Concept	MongoDB Equivalent	SQL Equivalent	Structure Example
Database	use myDB	USE myDB;	myDB contains collections
Collection	db.users	users table	Collection of user documents
Document	{name: "Nasim"}	row	JSON-like key-value pair object


üîç 1. List All Databases
üìå Command:
javascript
Copy
Edit
show dbs
‚úÖ Example Output:
arduino
Copy
Edit
admin      0.000GB
config     0.000GB
myDB       0.001GB
test       0.000GB
üìù This lists all databases present on your MongoDB server.

üìö 2. Switch to a Database
Before listing collections or documents, switch to your target database:

javascript
Copy
Edit
use myDB
üìÅ 3. List All Collections in the Database
üìå Command:
javascript
Copy
Edit
show collections
‚úÖ Example Output:
bash
Copy
Edit
users
products
orders
üìù This shows all collections (similar to tables) in the selected myDB.

üìÑ 4. List All Documents in a Collection
To see all documents inside a collection, use:

üìå Command:
javascript
Copy
Edit
db.collection_name.find()
‚úÖ Example:
javascript
Copy
Edit
db.users.find()
üì¶ Example Output:
json
Copy
Edit
[
  {
    "_id": ObjectId("66cb889ac3cfa08f12345678"),
    "name": "Nasim",
    "age": 23,
    "skills": ["MongoDB", "React"]
  },
  {
    "_id": ObjectId("66cb889ac3cfa08f12345679"),
    "name": "Reja",
    "age": 25,
    "skills": ["Node.js", "Express"]
  }
]
You can also format documents better using:

javascript
Copy
Edit
db.users.find().pretty()
üß≠ Visual Diagram (Conceptual)
plaintext
Copy
Edit
MongoDB Server
‚îÇ
‚îú‚îÄ‚îÄ Database: myDB
‚îÇ   ‚îú‚îÄ‚îÄ Collection: users
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Document: { name: "Nasim", age: 23 }
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Document: { name: "Reja", age: 25 }
‚îÇ   ‚îî‚îÄ‚îÄ Collection: products
‚îÇ       ‚îú‚îÄ‚îÄ Document: { title: "Book", price: 199 }
‚îÇ       ‚îú‚îÄ‚îÄ Document: { title: "Pen", price: 20 }
‚îÇ
‚îú‚îÄ‚îÄ Database: test
‚îÇ   ‚îî‚îÄ‚îÄ Collection: sample
üß† BONUS ‚Äì Commands Recap
Task	Command
List all databases	show dbs
Switch to a database	use myDB
List collections in a DB	show collections
Find all documents	db.collection.find()
Pretty print documents	db.collection.find().pretty()


üîÑ MongoDB CRUD Operations
üìå C ‚Äî Create
üìå R ‚Äî Read
üìå U ‚Äî Update
üìå D ‚Äî Delete
We'll use a sample collection called users.

1Ô∏è‚É£ CREATE ‚Äì Insert Data into a Collection
‚û§ Insert One Document
javascript
Copy
Edit
db.users.insertOne({
  name: "Nasim",
  age: 23,
  city: "Kolkata"
})
‚û§ Insert Many Documents
javascript
Copy
Edit
db.users.insertMany([
  { name: "Reja", age: 25, city: "Delhi" },
  { name: "Ali", age: 28, city: "Mumbai" }
])
2Ô∏è‚É£ READ ‚Äì Find/Query Documents
‚û§ Find All Documents
javascript
Copy
Edit
db.users.find()
‚û§ Find One Document
javascript
Copy
Edit
db.users.findOne({ name: "Nasim" })
‚û§ Filter with Condition
javascript
Copy
Edit
db.users.find({ age: { $gt: 24 } }) // age > 24
‚û§ Select Specific Fields
javascript
Copy
Edit
db.users.find({}, { name: 1, city: 1, _id: 0 }) // Show only name & city
3Ô∏è‚É£ UPDATE ‚Äì Modify Documents
‚û§ Update One Document
javascript
Copy
Edit
db.users.updateOne(
  { name: "Nasim" },                     // Filter
  { $set: { city: "Howrah", age: 24 } }  // Update
)
‚û§ Update Many Documents
javascript
Copy
Edit
db.users.updateMany(
  { city: "Delhi" },
  { $set: { city: "New Delhi" } }
)
4Ô∏è‚É£ DELETE ‚Äì Remove Documents
‚û§ Delete One Document
javascript
Copy
Edit
db.users.deleteOne({ name: "Ali" })
‚û§ Delete Many Documents
javascript
Copy
Edit
db.users.deleteMany({ city: "Mumbai" })
üß† Bonus: Query Operators Cheat Sheet
Operator	Meaning	Example
$gt	Greater than	{ age: { $gt: 20 } }
$lt	Less than	{ age: { $lt: 30 } }
$eq	Equal to	{ age: { $eq: 23 } }
$ne	Not equal	{ age: { $ne: 25 } }
$in	In array	{ city: { $in: ["Delhi", "Mumbai"] } }
$and	Logical AND	{ $and: [{ age: 23 }, { city: "Kolkata" }] }
$or	Logical OR	{ $or: [{ age: 23 }, { age: 25 }] }