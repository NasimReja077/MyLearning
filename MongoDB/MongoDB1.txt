üß© 1. Database
A MongoDB database is a container for collections, much like a database in MySQL or PostgreSQL. Each database holds its own collections and documents.

üîπ Key Points:
One MongoDB server can host multiple databases.

Each database is independent of others.

MongoDB creates the database when you first store data in it.

üìå Syntax:
javascript
Copy
Edit
use myDatabase
This command switches to or creates a database named myDatabase.

üìö 2. Collection
A collection is a group of MongoDB documents, similar to a table in a relational database.

üîπ Key Points:
A collection exists within a database.

Collections hold documents (not rows).

Documents inside a collection can have different fields and structures (unlike SQL tables).

üìå Syntax:
javascript
Copy
Edit
db.createCollection("users")
This creates a new collection named users.

OR simply:

javascript
Copy
Edit
db.users.insertOne({ name: "Nasim" })
This creates the users collection if it doesn‚Äôt exist and inserts a document into it.

üìÑ 3. Document
A document is the basic unit of data in MongoDB. It‚Äôs a JSON-like object (BSON ‚Äì Binary JSON) that stores data in key-value pairs.

üîπ Key Points:
Each document is like a row in a table.

Documents are schema-less, meaning fields can vary from document to document.

Each document must have a unique _id field (automatically generated if not provided).

üìå Example:
json
Copy
Edit
{
  "_id": ObjectId("64ee2a7e2fcf7123abc12345"),
  "name": "Nasim",
  "age": 23,
  "skills": ["MongoDB", "React", "Node.js"]
}
üìå Insert Document:
javascript
Copy
Edit
db.users.insertOne({
  name: "Nasim",
  age: 23,
  skills: ["MongoDB", "React"]
})
üß† Summary Table:
Concept	MongoDB Equivalent	SQL Equivalent	Structure Example
Database	use myDB	USE myDB;	myDB contains collections
Collection	db.users	users table	Collection of user documents
Document	{name: "Nasim"}	row	JSON-like key-value pair object


üîç 1. List All Databases
üìå Command:
javascript
Copy
Edit
show dbs
‚úÖ Example Output:
arduino
Copy
Edit
admin      0.000GB
config     0.000GB
myDB       0.001GB
test       0.000GB
üìù This lists all databases present on your MongoDB server.

üìö 2. Switch to a Database
Before listing collections or documents, switch to your target database:

javascript
Copy
Edit
use myDB
üìÅ 3. List All Collections in the Database
üìå Command:
javascript
Copy
Edit
show collections
‚úÖ Example Output:
bash
Copy
Edit
users
products
orders
üìù This shows all collections (similar to tables) in the selected myDB.

üìÑ 4. List All Documents in a Collection
To see all documents inside a collection, use:

üìå Command:
javascript
Copy
Edit
db.collection_name.find()
‚úÖ Example:
javascript
Copy
Edit
db.users.find()
üì¶ Example Output:
json
Copy
Edit
[
  {
    "_id": ObjectId("66cb889ac3cfa08f12345678"),
    "name": "Nasim",
    "age": 23,
    "skills": ["MongoDB", "React"]
  },
  {
    "_id": ObjectId("66cb889ac3cfa08f12345679"),
    "name": "Reja",
    "age": 25,
    "skills": ["Node.js", "Express"]
  }
]
You can also format documents better using:

javascript
Copy
Edit
db.users.find().pretty()
üß≠ Visual Diagram (Conceptual)
plaintext
Copy
Edit
MongoDB Server
‚îÇ
‚îú‚îÄ‚îÄ Database: myDB
‚îÇ   ‚îú‚îÄ‚îÄ Collection: users
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Document: { name: "Nasim", age: 23 }
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Document: { name: "Reja", age: 25 }
‚îÇ   ‚îî‚îÄ‚îÄ Collection: products
‚îÇ       ‚îú‚îÄ‚îÄ Document: { title: "Book", price: 199 }
‚îÇ       ‚îú‚îÄ‚îÄ Document: { title: "Pen", price: 20 }
‚îÇ
‚îú‚îÄ‚îÄ Database: test
‚îÇ   ‚îî‚îÄ‚îÄ Collection: sample
üß† BONUS ‚Äì Commands Recap
Task	Command
List all databases	show dbs
Switch to a database	use myDB
List collections in a DB	show collections
Find all documents	db.collection.find()
Pretty print documents	db.collection.find().pretty()


üîÑ MongoDB CRUD Operations
üìå C ‚Äî Create
üìå R ‚Äî Read
üìå U ‚Äî Update
üìå D ‚Äî Delete
We'll use a sample collection called users.

1Ô∏è‚É£ CREATE ‚Äì Insert Data into a Collection
‚û§ Insert One Document
javascript
Copy
Edit
db.users.insertOne({
  name: "Nasim",
  age: 23,
  city: "Kolkata"
})
‚û§ Insert Many Documents
javascript
Copy
Edit
db.users.insertMany([
  { name: "Reja", age: 25, city: "Delhi" },
  { name: "Ali", age: 28, city: "Mumbai" }
])
2Ô∏è‚É£ READ ‚Äì Find/Query Documents
‚û§ Find All Documents
javascript
Copy
Edit
db.users.find()
‚û§ Find One Document
javascript
Copy
Edit
db.users.findOne({ name: "Nasim" })
‚û§ Filter with Condition
javascript
Copy
Edit
db.users.find({ age: { $gt: 24 } }) // age > 24
‚û§ Select Specific Fields
javascript
Copy
Edit
db.users.find({}, { name: 1, city: 1, _id: 0 }) // Show only name & city
3Ô∏è‚É£ UPDATE ‚Äì Modify Documents
‚û§ Update One Document
javascript
Copy
Edit
db.users.updateOne(
  { name: "Nasim" },                     // Filter
  { $set: { city: "Howrah", age: 24 } }  // Update
)
‚û§ Update Many Documents
javascript
Copy
Edit
db.users.updateMany(
  { city: "Delhi" },
  { $set: { city: "New Delhi" } }
)
4Ô∏è‚É£ DELETE ‚Äì Remove Documents
‚û§ Delete One Document
javascript
Copy
Edit
db.users.deleteOne({ name: "Ali" })
‚û§ Delete Many Documents
javascript
Copy
Edit
db.users.deleteMany({ city: "Mumbai" })
üß† Bonus: Query Operators Cheat Sheet
Operator	Meaning	Example
$gt	Greater than	{ age: { $gt: 20 } }
$lt	Less than	{ age: { $lt: 30 } }
$eq	Equal to	{ age: { $eq: 23 } }
$ne	Not equal	{ age: { $ne: 25 } }
$in	In array	{ city: { $in: ["Delhi", "Mumbai"] } }
$and	Logical AND	{ $and: [{ age: 23 }, { city: "Kolkata" }] }
$or	Logical OR	{ $or: [{ age: 23 }, { age: 25 }] }



üß¨ MongoDB Data Types (with Examples)
MongoDB stores data in BSON format (Binary JSON), which supports more types than standard JSON.

Here's a list of commonly used data types:

1Ô∏è‚É£ String (String)
Used to store text.

Most commonly used data type.

javascript
Copy
Edit
{ "name": "Nasim" }
2Ô∏è‚É£ Integer (Int32, Int64)
Used to store whole numbers.

javascript
Copy
Edit
{ "age": 23 }
3Ô∏è‚É£ Double (Double)
Stores floating point numbers (decimal values).

javascript
Copy
Edit
{ "rating": 4.5 }
4Ô∏è‚É£ Boolean (Boolean)
Used to store true or false.

javascript
Copy
Edit
{ "isActive": true }
5Ô∏è‚É£ Array (Array)
Stores multiple values in a list.

javascript
Copy
Edit
{ "skills": ["MongoDB", "React", "Node.js"] }
6Ô∏è‚É£ Object (Embedded Document)
A document within a document.

javascript
Copy
Edit
{
  "address": {
    "city": "Kolkata",
    "pin": 700001
  }
}
7Ô∏è‚É£ ObjectId (ObjectId)
Unique identifier for documents.

Auto-generated if not provided.

javascript
Copy
Edit
{ "_id": ObjectId("66cb889ac3cfa08f12345678") }
8Ô∏è‚É£ Date (Date)
Stores date and time.

javascript
Copy
Edit
{ "createdAt": ISODate("2025-07-10T10:00:00Z") }
You can insert current date using:

javascript
Copy
Edit
{ "createdAt": new Date() }
9Ô∏è‚É£ Null (Null)
Represents a null or missing value.

javascript
Copy
Edit
{ "middleName": null }
üîü Binary Data (BinData)
Stores binary data like images, files, etc.

javascript
Copy
Edit
{ "file": BinData(0, "Base64DataHere") }
1Ô∏è‚É£1Ô∏è‚É£ Timestamp (Timestamp)
Used internally by MongoDB for replication and operations.

Rarely used directly in application development.

üß† Bonus: Check Data Type of a Field
javascript
Copy
Edit
db.users.find({ "age": { $type: "int" } })       // or use number code: $type: 16
üìã Data Type Codes Table (for $type queries)
Type	Name	Code
Double	double	1
String	string	2
Object	object	3
Array	array	4
Binary data	binData	5
Undefined	undefined	6
ObjectId	objectId	7
Boolean	bool	8
Date	date	9
Null	null	10
Regular Exp	regex	11
JavaScript	js	13
Int32	int	16
Timestamp	timestamp	17
Int64	long	18
Decimal128	decimal	19



üîß MongoDB Operators ‚Äì Categories
MongoDB operators are classified into:

üîç Query Operators (used in find)

‚úçÔ∏è Update Operators (used in update)

üß† Aggregation Operators (used in aggregate)

üîó Projection Operators (used to select fields)

üîç 1. Query Operators
These are used to filter documents in find(), delete(), etc.

Operator	Description	Example
$eq	Equals	{ age: { $eq: 23 } }
$ne	Not equals	{ name: { $ne: "Nasim" } }
$gt	Greater than	{ age: { $gt: 20 } }
$lt	Less than	{ age: { $lt: 30 } }
$gte	Greater than or equal	{ age: { $gte: 18 } }
$lte	Less than or equal	{ age: { $lte: 25 } }
$in	Matches any value in array	{ city: { $in: ["Delhi", "Kolkata"] } }
$nin	Not in array	{ city: { $nin: ["Mumbai"] } }
$exists	Field exists or not	{ phone: { $exists: true } }
$regex	Pattern matching	{ name: { $regex: "^N" } }
$and	Logical AND	{ $and: [{ age: 23 }, { city: "Kolkata" }] }
$or	Logical OR	{ $or: [{ city: "Delhi" }, { age: 23 }] }

‚úçÔ∏è 2. Update Operators
Used in updateOne(), updateMany(), etc.

Operator	Description	Example
$set	Set field to a value	{ $set: { age: 24 } }
$unset	Remove a field	{ $unset: { city: "" } }
$inc	Increment a field	{ $inc: { age: 1 } }
$mul	Multiply a field value	{ $mul: { score: 2 } }
$rename	Rename a field	{ $rename: { "city": "location" } }
$push	Add item to array	{ $push: { skills: "Express" } }
$pop	Remove first/last item from array	{ $pop: { skills: -1 } } (-1 = first, 1 = last)
$pull	Remove matching value from array	{ $pull: { skills: "Node.js" } }
$addToSet	Add item to array if not exists	{ $addToSet: { skills: "React" } }
$currentDate	Set current date/time	{ $currentDate: { lastModified: true } }

üß† 3. Aggregation Operators
Used in the Aggregation Pipeline (db.collection.aggregate()).

Operator	Description
$match	Filters documents (like find)
$group	Groups documents by fields
$project	Select/rename fields
$sort	Sorts results
$limit	Limits result count
$skip	Skips documents
$sum	Sums values
$avg	Averages values
$min / $max	Minimum/maximum value
$count	Counts documents in pipeline

üí° These are used for data processing, like SQL GROUP BY, SUM(), etc.

üîé 4. Projection Operators
Used to control which fields are returned in queries:

Operator	Description	Example
1	Include field	{ name: 1, age: 1 }
0	Exclude field	{ _id: 0 }
$slice	Return part of array	{ comments: { $slice: 5 } }
$elemMatch	Match array element	{ scores: { $elemMatch: { score: { $gt: 80 } } } }

üß™ Sample Query Using Operators:
javascript
Copy
Edit
db.users.find({
  $and: [
    { age: { $gte: 18, $lte: 30 } },
    { city: { $in: ["Kolkata", "Delhi"] } }
  ]
})
üìå Summary Sheet (Cheat Code)
Category	Common Operators
Query	$eq, $gt, $lt, $in, $regex, $and, $or
Update	$set, $unset, $inc, $push, $pull
Aggregation	$match, $group, $sum, $avg, $project
Projection	1, 0, $slice, $elemMatch




What is Aggregation in MongoDB?
Aggregation is a way to transform, filter, and analyze data from a MongoDB collection, similar to SQL's:

sql
Copy
Edit
SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ...
In MongoDB, it‚Äôs done using the Aggregation Pipeline ‚Äî a series of stages that process documents.

üõ†Ô∏è Aggregation Pipeline Syntax:
javascript
Copy
Edit
db.collection.aggregate([
  { /* stage 1 */ },
  { /* stage 2 */ },
  ...
])
Each stage takes input documents, processes them, and passes the output to the next stage.

üìä Common Aggregation Pipeline Stages
Stage	Description
$match	Filters documents (like WHERE)
$group	Groups data and performs operations
$project	Selects, adds, or reshapes fields
$sort	Sorts documents
$limit	Limits the number of documents
$skip	Skips a number of documents
$count	Counts the documents
$unwind	Breaks arrays into separate documents
$lookup	Joins documents from another collection

‚úÖ Basic Aggregation Example
Suppose you have a users collection:

json
Copy
Edit
[
  { name: "Nasim", city: "Kolkata", age: 23 },
  { name: "Reja", city: "Delhi", age: 25 },
  { name: "Ali", city: "Kolkata", age: 30 }
]
üëâ Count users by city:
javascript
Copy
Edit
db.users.aggregate([
  { $group: { _id: "$city", totalUsers: { $sum: 1 } } }
])
üßæ Output:
json
Copy
Edit
[
  { "_id": "Kolkata", "totalUsers": 2 },
  { "_id": "Delhi", "totalUsers": 1 }
]
üì¶ $match Stage
Filter documents before processing:

javascript
Copy
Edit
{ $match: { city: "Kolkata" } }
üì¶ $group Stage
Group documents and perform aggregations:

javascript
Copy
Edit
{ 
  $group: {
    _id: "$city",
    total: { $sum: 1 },
    avgAge: { $avg: "$age" }
  }
}
üì¶ $project Stage
Include, exclude, rename fields, or create computed fields:

javascript
Copy
Edit
{
  $project: {
    _id: 0,
    name: 1,
    city: 1,
    isAdult: { $cond: [{ $gte: ["$age", 18] }, true, false] }
  }
}
üì¶ $sort, $limit, $skip
javascript
Copy
Edit
{ $sort: { age: -1 } }   // Descending
{ $limit: 5 }
{ $skip: 10 }
üîó $lookup ‚Äì JOIN Collections
Suppose you have:

orders collection with a userId

users collection

Join them:

javascript
Copy
Edit
db.orders.aggregate([
  {
    $lookup: {
      from: "users",
      localField: "userId",
      foreignField: "_id",
      as: "userDetails"
    }
  }
])
üß™ Full Example: Average Age by City (Only if age > 20)
javascript
Copy
Edit
db.users.aggregate([
  { $match: { age: { $gt: 20 } } },
  { $group: {
      _id: "$city",
      averageAge: { $avg: "$age" },
      count: { $sum: 1 }
    }
  },
  { $sort: { averageAge: -1 } }
])
üìå Aggregation Use Cases:
Group sales by month/year

Count users by country/city

Calculate total revenue

Join two collections (like SQL JOIN)

Filter, transform, and reshape data