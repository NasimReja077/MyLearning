C:\Users\User>mongosh
----------------Create Database-------
test> show dbs / 
---------------------Drop Database---------

test> use myTestDatabase
switched to db myTestDatabase

myTestDatabase> db.dropDatabase()// Deletes / Drop the current database (myTestDatabase) along with all its collections and data.
{ ok: 1, dropped: 'myTestDatabase' }
myTestDatabase>

Switch to the Correct Database -> use test
View All Collections - show collections
View All Documents in Teacher - db.Teacher.find()

--------------------------------Create Collection-------------
db.createCollection("mycollection")
{ "ok" : 1 }

show collection
--You simply start inserting data. When you use methods like insertOne() or insertMany() on a collection name that doesn't yet exist within your selected database, MongoDB will create that collection for you.--->

test> db.student.insertOne({name: "Raju", age: 25}) // Insert Document in student Collection
->
{
  acknowledged: true,
  insertedId: ObjectId('687244b7958465b411718dc4')
}


test> db.studnt.find() // This returns nothing because there is no collection named studnt (typo).


test> db.student.find()

[
  { _id: ObjectId('687244b7958465b411718dc4'), name: 'Raju', age: 25 }
]


test> show collections  // to list all collections
student 

test> show dbs   // to see data in Teacher
admin   40.00 KiB
config  72.00 KiB
local   40.00 KiB
test    40.00 KiB

test> use test
already on db test

test> db.Teacher
test.Teacher

test> show collections
student

-------Drop Collection----
db.COLLECTION_NAME.drop()



test> db.Teacher.insertMany([])  //Empty Array
MongoInvalidArgumentError: Invalid BulkOperation, Batch cannot be empty

test> db.Teacher.insertMany(  // Insert Multiple Documents in Teacher Collection
... [
... {"Name":"Nasim"},
... {"Name":"Joy"}
... ]
... )
->
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('68724726958465b411718dc5'),
    '1': ObjectId('68724726958465b411718dc6')
  }
}


test> show collections
->
student
Teacher

test> db.Teacher.find() // Retrieve All Documents from Teacher

[
  { _id: ObjectId('68724726958465b411718dc5'), Name: 'Nasim' },
  { _id: ObjectId('68724726958465b411718dc6'), Name: 'Joy' }
]

test> db.student.find()

[
  { _id: ObjectId('687244b7958465b411718dc4'), name: 'Raju', age: 25 }
]

test> db.Teacher.find().pretty() // If you ever want to pretty-print the find() result

---------------------Insert Document------------
The insert() Method -> To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method.
Syntax:- 
The basic syntax of insert() command is as follows −
>db.COLLECTION_NAME.insert(document)

test> use car_dealership
switched to db car_dealership

---------insertOne()------
car_dealership> db.cars.insertOne({
...     "maker": "Tata",
...     "model": "Nexon",
...     "fuel_type": "Petrol",
...     "transmission": "Automatic",
...     "engine": {
...         "type": "Turbocharged",
...         "cc": 1199,
...         "torque": "170 Nm"
...     },
...     "features": [
...         "Touchscreen",
...         "Reverse Camera",
...         "Bluetooth Connectivity"
...     ],
...     "sunroof": false,
...     "airbags": 2
})

car_dealership> db.cars.find()
[
  {
    _id: ObjectId('68726925958465b411718dc7'),
    maker: 'Tata',
    model: 'Nexon',
    fuel_type: 'Petrol',
    transmission: 'Automatic',
    engine: { type: 'Turbocharged', cc: 1199, torque: '170 Nm' },
    features: [ 'Touchscreen', 'Reverse Camera', 'Bluetooth Connectivity' ],
    sunroof: false,
    airbags: 2
  }
]

-------------insertMany()-----------
car_dealership> db.cars.insertMany([
...     {
...         "maker": "Hyundai",
...         "model": "Creta",
...         "fuel_type": "Diesel",
...         "transmission": "Manual",
...         "engine": {
...             "type": "Naturally Aspirated",
...             "cc": 1493,
...             "torque": "250 Nm"
...         },
...         "features": [
...             "Sunroof",
...             "Leather Seats",
...             "Wireless Charging",
...             "Ventilated Seats",
...             "Bluetooth"
...         ],
...         "sunroof": true,
...         "airbags": 6
...     },
...     {
...         "maker": "Maruti Suzuki",
...         "model": "Baleno",
...         "fuel_type": "Petrol",
...         "transmission": "Automatic",
...         "engine": {
...             "type": "Naturally Aspirated",
...             "cc": 1197,
...             "torque": "113 Nm"
...         },
...         "features": [
...             "Projector Headlamps",
...             "Apple CarPlay",
...             "ABS"
...         ],
...         "sunroof": false,
...         "airbags": 2
...     },
...     {
...         "maker": "Mahindra",
...         "model": "XUV500",
...         "fuel_type": "Diesel",
...         "transmission": "Manual",
...         "engine": {
...             "type": "Turbocharged",
...             "cc": 2179,
...             "torque": "360 Nm"
...         },
...         "features": [
...             "All-Wheel Drive",
...             "Navigation System",
...             "Cruise Control"
...         ],
...         "sunroof": true,
...         "airbags": 6
...     },
...     {
...         "maker": "Honda",
...         "model": "City",
...         "fuel_type": "Petrol",
...         "transmission": "Automatic",
...         "engine": {
...             "type": "Naturally Aspirated",
...             "cc": 1498,
...             "torque": "145 Nm"
...         },
...         "features": [
...             "Keyless Entry",
...             "Auto AC",
...             "Multi-angle Rearview Camera"
...         ],
...         "sunroof": false,
...         "airbags": 4
...     }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('68727132958465b411718dc8'),
    '1': ObjectId('68727132958465b411718dc9'),
    '2': ObjectId('68727132958465b411718dca'),
    '3': ObjectId('68727132958465b411718dcb')
  }
}
------------find() Operation------------
# Basic Syntax
The find() method takes two optional arguments:

# query (or filter): A document that specifies the selection criteria (which documents to return). If omitted or an empty document ({}), all documents in the collection are returned.
projection: A document that specifies which fields to include or exclude from the returned documents.

# The general syntax is:
db.collection.find(query, projection)
------------
use car_dealership // Ensure you are in the correct database
db.cars.find({})
// Or simply:
db.cars.find()
-------------
// Find cars made by "Honda"
db.cars.find({ maker: "Honda" })

// Find cars with "Petrol" fuel type and "Automatic" transmission (AND condition implicitly)
db.cars.find({ fuel_type: "Petrol", transmission: "Automatic" })

// Find cars with a specific engine type
db.cars.find({ "engine.type": "Turbocharged" }) // Use dot notation for nested fields
----------------
car_dealership> db.cars.findOne({ model: "Nexon" })
{
  _id: ObjectId('68726925958465b411718dc7'),
  maker: 'Tata',
  model: 'Nexon',
car_dealership>
  transmission: 'Automatic',
  engine: { type: 'Turbocharged', cc: 1199, torque: '170 Nm' },
  features: [ 'Touchscreen', 'Reverse Camera', 'Bluetooth Connectivity' ],
  sunroof: false,
  airbags: 2
}
-----------------------------
car_dealership> db.cars.find({},{model:1,_id:0}) 

[
  { model: 'Nexon' },
  { model: 'Creta' },
  { model: 'Baleno' },
  { model: 'XUV500' },
  { model: 'City' }
]

// db.cars.find() - Finds documents in the cars collection
// {} - Empty filter – match all documents
// { model: 1, _id: 0 } - Projection – show only the model field and exclude _id

-------------------update----------------


MongoDB Update Operators Cheat Sheet:
Operator	  Meaning
$set	      Add new field or update value
$unset	    Remove field
$inc	      Increment numeric value
$rename	    Rename a field
$mul	      Multiply a field
$min/$max	  Set value only if lower/higher
$push/$pull	Add/remove from array
$push	      Add value to end of array
$each	      Push multiple values
$addToSet	  Add only if not already present
$pull	      Remove a value from array
$pullAll	  Remove multiple values
$set	      Replace value at a specific index

-----------updateOne

Syntax of updateOne()

db.cars.updateOne(
  <filter>,        // which document to update
  <update>,        // how to update
  <options>        // optional (e.g., upsert: true)
)

Example 1: Update Transmission Type of a Specific Car
🔹 Change the transmission of the "City" model from "Automatic" to "Manual":

car_dealership> db.cars.updateOne(
... { model: "City" },
... { $set: { transmission: "Manual" }}
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

car_dealership> db.cars.updateOne( { model: "Baleno" }, { $set: { color: "Red" } } )
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0


car_dealership> db.cars.updateOne( { model: "Honda" }, { $push: { features: "Heated Seats" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}

To add a new element to an existing array field in a document.
If the field doesn't exist, it creates the field as a new array and adds the element. 

--------updateMany-----
db.cars.updateMany(
  { fuel_type: "Diesel" },
  { $set: { eco_friendly: false } }
)
// Add multiple new features to the array

db.cars.updateOne(
  { model: "Nexon" },
  { $push: { features: { $each: [ "Voice Control", "Android Auto" ] } } }
)

// Remove multiple values from the array

db.cars.updateOne(
  { model: "Creta" },
  { $pullAll: { features: [ "Sunroof", "Bluetooth" ] } }
)

Update a specific value in the array (replace one value)

// Add a feature only if it doesn’t already exist
db.cars.updateOne(
  { model: "City" },
  { $addToSet: { features: "Cruise Control" } }
) // Only adds "Cruise Control" if it’s not already present.



db.collection.update(
  { _id: 1},
  { $unset: { "address": ""}}
)


----------------------delete--------
deleteOne() → deletes only the first matching document.

deleteMany() → deletes all matching documents.

Syntax:
db.collection.deleteOne(<filter>)
db.collection.deleteMany(<filter>)
---
Example 1: Delete a Specific Car Model
Let's say you want to delete the car with model "Baleno" from the cars collection:

db.cars.deleteOne({ model: "Baleno" })
---
Example 3: Delete by Nested Field (e.g., engine.cc < 1200)

db.cars.deleteMany({ "engine.cc": { $lt: 1200 } })
---
Example 4: Delete All Cars (Be Careful!)
db.cars.deleteMany({})
---Data type------------------------------------
Data type using $type:
db.cars.find({ sunroof: { $type: "bool" } })   // all boolean sunroof fields
Or by type number:
db.cars.find({ model: { $type: 2 } })          // type 2 = string
----------------------------------------------
-------------------Operators----------------------
------Comparison Operators

// Get all Diesel cars
car_dealership> db.cars.find({ fuel_type: { $eq: "Diesel" } })

// Get cars with engine capacity between 1200cc and 2000cc
car_dealership> db.cars.find({ "engine.cc": { $gte: 1200, $lte: 2000 } })

// Combine Multiple Comparison Operators:
// This finds cars with 2 or more airbags and engine < 1500cc.
car_dealership> db.cars.find({ airbags: { $gte: 2 }, "engine.cc": { $lt: 1500 } })

----------- Logical Operators--------
// Get cars that are Diesel and have at least 4 airbags:
db.cars.find({
  $and: [
    { fuel_type: "Diesel" },
    { airbags: { $gte: 4 } }
  ]
})

✅ You can also write it without $and (MongoDB automatically applies AND when multiple conditions are at top level):


// Get cars where model is Nexon OR sunroof is true:
db.cars.find({
  $or: [
    { model: "Nexon" },
    { sunroof: true }
  ]
})

// Get cars where airbags are NOT greater than 2:
db.cars.find({
  airbags: { $not: { $gt: 2 } }
})

// Get cars that are neither Petrol nor Automatic:

db.cars.find({
  $nor: [
    { fuel_type: "Petrol" },
    { transmission: "Automatic" }
  ]
})

------------------Element Operators---------------

MongoDB Element Operators, which are used to check:
  Whether a field exists or not
  The data type of a field
These are useful when working with optional fields, inconsistent data, or schema-less collections (very common in MongoDB).

Operator	        Description	      Example
$exists	 Checks if a field exists (true/false)	  { sunroof: { $exists: true } }
$type	   Checks the BSON data type of a field	    { airbags: { $type: "int" } }

> $exists: Check if a field exists
Find all cars that have a sunroof field:
db.cars.find({ sunroof: { $exists: true } })

Find cars where color field does not exist:
db.cars.find({ color: { $exists: false } })

> $type: Check data type of a field

Find all cars where airbags is a number:
db.cars.find({ airbags: { $type: "int" } })

---------------Evaluation Operators------------

MongoDB Evaluation Operators, which let you perform more complex or custom queries like:
>     Matching documents using expressions
>     Pattern matching (like SQL LIKE)
>     Conditions based on computed values

// Find cars where airbags are greater than engine.cc divided by 500:
db.cars.find({
  $expr: { $gt: [ "$airbags", { $divide: [ "$engine.cc", 500 ] } ] }
})


> $regex: Pattern matching (like SQL LIKE)
// Find all models that start with "C":
db.cars.find({ model: { $regex: /^C/ } })

> $mod: Match values using modulus
//Find cars where airbags are even:
db.cars.find({ airbags: { $mod: [2, 0] } })
//Find cars with airbags that leave remainder 1 when divided by 3:
db.cars.find({ airbags: { $mod: [3, 1] } })

> $text: Full-text search (requires index)
// First, create a text index:
db.cars.createIndex({ model: "text", maker: "text" })

// Then search for "Honda" or "City":
db.cars.find({ $text: { $search: "Honda City" } })

//Search for exact phrase:
db.cars.find({ $text: { $search: "\"Honda City\"" } })

-----------Update Operators-------------

// Adds "color": "Red" if it doesn't exist, or updates it.
db.cars.updateOne(
  { model: "Nexon" },
  { $set: { color: "Red" } }
)

// Deletes the sunroof field from the document.
db.cars.updateOne(
  { model: "Nexon" },
  { $unset: { sunroof: "" } }
)

// Renames fuel_type to fuelType
db.cars.updateOne(
  { model: "Nexon" },
  { $rename: { fuel_type: "fuelType" } }
)

------------------Array Operators-----------
$push — Add item to array (can duplicate)
db.cars.updateOne(
  { model: "Creta" },
  { $push: { features: "Ventilated Seats" } }
) // Adds new value to features[].


// $addToSet — Add item only if not present
// Avoids adding duplicate "Bluetooth" if already present.
db.cars.updateOne(
  { model: "Creta" },
  { $addToSet: { features: "Bluetooth" } }
)

// $pull — Remove matching value
// Removes "Sunroof" from features[].
db.cars.updateOne(
  { model: "Creta" },
  { $pull: { features: "Sunroof" } }
)


> $pullAll — Remove multiple values
> Removes both "ABS" and "Bluetooth".
db.cars.updateOne(
  { model: "Creta" },
  { $pullAll: { features: [ "ABS", "Bluetooth" ] } }
)

//$pop — Remove first or last array item

db.cars.updateOne(
  { model: "Creta" },
  { $pop: { features: -1 } }  // removes first item
)

db.cars.updateOne(
  { model: "Creta" },
  { $pop: { features: 1 } }   // removes last item
)

----------Cursor Methods------
db.cars.find().forEach(doc => printjson(doc))
let allCars = db.cars.find().toArray()
let allCars = db.cars.find().toArray()
db.cars.find().skip(2)
db.cars.find().sort({ model: 1 })
db.cars.find().sort({ airbags: -1 }).skip(2).limit(3)
-----------------------Aggregation Operators-----------
 Aggregation Operators (used in pipelines)
Operator	Meaning	Example
$sum	Sum values	$sum: "$airbags"
$avg	Average	$avg: "$engine.cc"
$min	Minimum	$min: "$airbags"
$max	Maximum	$max: "$airbags"
$group	Group documents	{ _id: "$fuel_type", total: { $sum: 1 } }
$match	Filter documents	{ $match: { sunroof: true } }
$project	Include/exclude fields	{ $project: { model: 1, _id: 0 } }


--------------------Aggregate Framework----------------------

---$group
// Group by fuel_type and count cars
car_dealership> db.cars.aggregate( [{ $group: { _id: "$fuel_type", count: { $sum: 1 } } }])
[
  { _id: 'Electric', count: 2 },
  { _id: 'CNG', count: 2 },
  { _id: 'Diesel', count: 4 },
  { _id: 'Petrol', count: 6 }
]

// Average price by maker

db.cars.aggregate([
  {
    $group: {
      _id: "$maker",
      avg_price: { $avg: "$price"}
    }
  }
])

car_dealership> db.cars.aggregate([
...   {
...     $group: {
...       _id: "$maker",
...       avg_price: { $avg: "$price"}
...     }
...   }
... ])
[
  { _id: 'Honda', avg_price: 1000000 },
  { _id: 'Hyundai', avg_price: 1475000 },
  { _id: 'Maruti Suzuki', avg_price: 716666.6666666666 },
  { _id: 'Tata', avg_price: 1500000 },
  { _id: 'Mahindra', avg_price: 1800000 }
]

car_dealership> db.cars.aggregate([
...   {
...     $group: {
...       _id: "$maker",
...       models: { $push: "$model" }
...     }
...   }
... ])
[
  { _id: 'Tata', models: [ 'Nexon', 'Harrier', 'Nexon EV' ] },
  { _id: 'Mahindra', models: [ 'XUV500' ] },
  {
    _id: 'Hyundai',
    models: [ 'Creta', 'Venue', 'i20', 'Kona Electric' ]
  },
  { _id: 'Maruti Suzuki', models: [ 'Baleno', 'Swift', 'WagonR' ] },
  { _id: 'Honda', models: [ 'City', 'Amaze', 'Amaze' ] }
]

-----------$match--------
car_dealership> db.cars.aggregate([ { $match: { fuel_type: "Diesel" } }])

db.cars.aggregate([
  { $match: { features: "Sunroof" } }
])

db.cars.aggregate([
  { $match: { "engine.cc": { $gt: 1500 } } }
])

db.cars.aggregate([
  { $match: { maker: { $in: ["Hyundai", "Honda"] } } }
])

Hyundai cars having engine of more than 1200cc

db.cars.aggregate(
  [{$match:
  {maker:"Hyundai",
  "engine.cc":{$gt:1000}
  }}])

  ---------------$COUNT--------

car_dealership> db.cars.aggregate([ { $count: "totalCars" }])
[ { totalCars: 14 } ]

car_dealership> db.cars.aggregate([
... { $match: { fuel_type: "Petrol" }},
... { $count: "petrolCare" }
... ])
[ { petrolCare: 6 } ]


db.cars.aggregate([
  { $unwind: "$service_history" },
  { $count: "totalServices" }
])


----------------$project---------
Include specific fields
js
Copy
Edit
db.cars.aggregate([
  {
    $project: {
      _id: 0,
      maker: 1,
      model: 1,
      price: 1
    }
  }
])
✅ Output will show only maker, model, and price.

-
car_dealership> db.cars.aggregate([ { $project: { _id: 0, car_maker: "$maker", car_model: "$model"}}])

✅ Renames maker to car_maker, model to car_model.

---
car_dealership> db.cars.aggregate([ { $project: {model:1, price_with_tax: { $multiply: ["$price",1.18]}}}])

✅ Adds 18% GST to price and shows a new field price_with_tax.
---
// Access nested fields
// Extracts engine.cc and shows it as engine_cc.
car_dealership> db.cars.aggregate([ { $project: { model:1, engine_cc:"$engine.cc"}}])

// Concatenate two fields
db.cars.aggregate([
  {
    $project: {
      full_name: { $concat: ["$maker", " ", "$model"] }
    }
  }
])
✅ Output:
{ full_name: "Tata Nexon" }


car_dealership> db.cars.aggregate([
... {
... $project: {
... model: 1,
... category: {
... $cond: { if: { $gte: ["$price", 1500000]}, then:"Premium",else:"Budget"}
... }
... }
... }
... ])

[
  {
    _id: ObjectId('6873cbc8c7e75044284996e9'),
    model: 'Creta',
    category: 'Premium'
  },
  {
    _id: ObjectId('6873cbc8c7e75044284996ea'),
    model: 'Baleno',
    category: 'Budget'
  }
]

-----------$sort--------
//Sort cars by price (low to high)
db.cars.aggregate([
  { $sort: { price: 1 } }
])

// Sort by price (high to low)
// Sorts cars from most expensive to cheapest.
db.cars.aggregate([
  { $sort: { price: -1 } }
])



// Sort by multiple fields
// First sorts by fuel_type (alphabetically), and within each fuel type, sorts by price (descending).
car_dealership> db.cars.aggregate([ { $sort: { fuel_type: 1, price: -1 } }] )


// Sort by nested field (engine.cc)
db.cars.aggregate([
  { $sort: { "engine.cc": -1 } }
])
✅ Sorts by engine capacity in descending order.


// Sort after $group or $match
// Example: Sort fuel types by average price.

car_dealership> db.cars.aggregate([
...   {
...     $group: {
...       _id: "$fuel_type",
...       avg_price: { $avg: "$price" }
...     }
...   },
...   { $sort: { avg_price: -1 } }
... ])
[
  { _id: 'Electric', avg_price: 1850000 },
  { _id: 'Diesel', avg_price: 1575000 },
  { _id: 'Petrol', avg_price: 991666.6666666666 },
  { _id: 'CNG', avg_price: 700000 }
]

-----------------------$limit-----------
db.cars.aggregate([
  { $sort: { price: -1 } },  // High to low
  { $limit: 3 }
])
✅ Returns top 3 most expensive cars.

db.cars.aggregate([
  { $match: { fuel_type: "Electric" } },
  { $sort: { price: 1 } },   // Low to high
  { $limit: 2 }
])
✅ Filters electric cars, sorts them, and limits to 2 cheapest.

Example: Group by maker and show top 2 makers only:

db.cars.aggregate([
  { $group: { _id: "$maker", totalCars: { $sum: 1 } } },
  { $limit: 2 }
])

-------------unwind
Example 1: Unwind features of each car
✅ Returns each car model with each individual feature on a separate document.

db.cars.aggregate([
  { $unwind: "$features" },
  { $project: { _id: 0, model: 1, features: 1 } }
])

Example 2: Count how many features each model has
✅ Gives the number of features for each car model.

db.cars.aggregate([
  { $unwind: "$features" },
  { $group: { _id: "$model", featureCount: { $sum: 1 } } }
])

// Unwind service_history and calculate total cost per car
// ✅ Sums up total service cost for each model.

db.cars.aggregate([
  { $unwind: "$service_history" },
  {
    $group: {
      _id: "$model",
      totalCost: { $sum: "$service_history.cost" }
    }
  }
])
---------------

// Join cars with sales using model:
db.cars.aggregate([
  {
    $lookup: {
      from: "sales",           // foreign collection
      localField: "model",     // from current (cars) collection
      foreignField: "model",   // from sales collection
      as: "sales_data"         // new field with array of matches
    }
  }
])



Flatten the result using $unwind
Since sales_data is an array, you can use $unwind to make it easier to work with:

js
Copy
Edit
db.cars.aggregate([
  {
    $lookup: {
      from: "sales",
      localField: "model",
      foreignField: "model",
      as: "sales_data"
    }
  },
  { $unwind: "$sales_data" },
  {
    $project: {
      _id: 0,
      model: 1,
      maker: 1,
      sold_count: "$sales_data.sold_count"
    }
  }
])
✅ Clean, merged result with joined data.

🛠 Real-Life Use Case: Join orders and customers
Let’s say:

orders collection contains { customer_id: 101, item: "Phone" }

customers collection contains { customer_id: 101, name: "Nasim" }


db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "customer_id",
      as: "customer_info"
    }
  }
])

------------------------
db.cars.aggregate([
  {
    $addFields: {
      status: "Available"
    }
  }
])



Add category based on price

db.cars.aggregate([
  {
    $addFields: {
      category: {
        $cond: {
          if: { $gte: ["$price", 1500000] },
          then: "Premium",
          else: "Budget"
        }
      }
    }
  }
])
✅ Adds a new field category based on price.


----------------
Conditional Operators
Adds "category": "Premium" if price ≥ 15 lakh, else "Budget"

Tag expensive cars

db.cars.aggregate([
  {
    $addFields: {
      category: {
        $cond: {
          if: { $gte: ["$price", 1500000] },
          then: "Premium",
          else: "Budget"
        }
      }
    }
  }
])


Shorthand version
{ $cond: [ { $gte: ["$price", 1500000] }, "Premium", "Budget" ] }


If airbags is null, set it to 2

db.cars.aggregate([
  {
    $project: {
      model: 1,
      airbags: { $ifNull: ["$airbags", 2] }
    }
  }
])
✅ If airbags is missing or null, it sets the value to 2.

Categorize based on fuel type

db.cars.aggregate([
  {
    $addFields: {
      fuel_category: {
        $switch: {
          branches: [
            { case: { $eq: ["$fuel_type", "Petrol"] }, then: "Non-EV" },
            { case: { $eq: ["$fuel_type", "Diesel"] }, then: "Non-EV" },
            { case: { $eq: ["$fuel_type", "Electric"] }, then: "EV" },
            { case: { $eq: ["$fuel_type", "CNG"] }, then: "Alternative Fuel" }
          ],
          default: "Unknown"
        }
      }
    }
  }
])
✅ Assigns a fuel category based on the fuel_type field.


Label cars as:

"High-End" if price ≥ 20,00,000

"Mid-Range" if 10L–20L

"Economy" if < 10L

db.cars.aggregate([
  {
    $addFields: {
      price_label: {
        $switch: {
          branches: [
            { case: { $gte: ["$price", 2000000] }, then: "High-End" },
            { case: { $gte: ["$price", 1000000] }, then: "Mid-Range" }
          ],
          default: "Economy"
        }
      }
    }
  }
])
------------------
DATE Operators

car_dealership> db.orders.aggregate([
... {
... $project: {
... orderdate: 1,
... deliveryDate: {
... $dateAdd: {
... startDate: "$orderDate",
... unit: "day",
... amount: 7
... }
}}}
])
-------------
car_dealership> db.users.aggregate([ { $project: { name: 1, age: { $dateDiff: { startDate: "$dob", endDate: "$$NOW", unit: "year" }}}}])
-------
db.orders.aggregate([
  {
    $project: {
      orderDate: 1,
      year: { $year: "$orderDate" },
      month: { $month: "$orderDate" },
      hour: { $hour: "$orderDate" },
      dayOfMonth: { $dayOfMonth: "$orderDate" },
      dayOfYear: { $dayOfYear: "$orderDate" },
      deliveryDate: {
        $dateAdd: {
          startDate: "$orderDate",
          unit: "day",
          amount: 7
        }
      }
    }
  }
])
-----------------
. Use $$ROOT to embed the whole document
Question:
Project the dealer's name and include the entire document under a new field called fullDetails.

db.car_dealership.aggregate([
  {
    $project: {
      dealer: 1,
      fullDetails: "$$ROOT"
    }
  }
])

2. Use $$CURRENT inside $map to show car models
Question:
List all car models and show the dealership name next to each using $$CURRENT.

db.car_dealership.aggregate([
  {
    $project: {
      dealer: 1,
      carModels: {
        $map: {
          input: "$cars",
          as: "car",
          in: {
            model: "$$car.model",
            dealer: "$dealer",
            currentObj: "$$CURRENT"
          }
        }
      }
    }
  }
])

Use $$NOW to calculate time since a car was sold
Question:
Show the number of days since the first car was sold, using $$NOW.

Solution:

js
Copy
Edit
db.car_dealership.aggregate([
  {
    $project: {
      dealer: 1,
      daysSinceSold: {
        $dateDiff: {
          startDate: { $arrayElemAt: ["$cars.soldDate", 0] },
          endDate: "$$NOW",
          unit: "day"
        }
      }
    }
  }
])

4. Use $$REMOVE to conditionally hide a field
Question:
Remove the location field if the dealer name is AutoMax.

Solution:

js
Copy
Edit
db.car_dealership.aggregate([
  {
    $project: {
      dealer: 1,
      location: {
        $cond: {
          if: { $eq: ["$dealer", "AutoMax"] },
          then: "$$REMOVE",
          else: "$location"
        }
      }
    }
  }
])
🟢 5. Use $let (user-defined variable) to calculate discount
Question:
For each car, calculate a 10% discount using $let.

Solution:

js
Copy
Edit
db.car_dealership.aggregate([
  {
    $unwind: "$cars"
  },
  {
    $project: {
      model: "$cars.model",
      price: "$cars.price",
      discountedPrice: {
        $let: {
          vars: {
            discount: { $multiply: ["$cars.price", 0.10] }
          },
          in: { $subtract: ["$cars.price", "$$discount"] }
        }
      }
    }
  }
])
🟢 6. Use $let with $cond to mark expensive cars
Question:
Add a field tag as "Luxury" if the car price is above ₹15,00,000 else "Standard" using $let.

Solution:

js
Copy
Edit
db.car_dealership.aggregate([
  { $unwind: "$cars" },
  {
    $project: {
      model: "$cars.model",
      price: "$cars.price",
      tag: {
        $let: {
          vars: { p: "$cars.price" },
          in: {
            $cond: {
              if: { $gt: ["$$p", 1500000] },
              then: "Luxury",
              else: "Standard"
            }
          }
        }
      }
    }
  }
])
⚠️ For Advanced: $$DESCEND and $$CLUSTER_TIME
These are more advanced and rarely used:

$$DESCEND is used only inside $redact for access control.

$$CLUSTER_TIME is used in replica set operations for causal consistency (useful in sharding/multi-document transactions).

Let me know if you want practice on $redact or sharded setups.



---------Indexes--------
db.car_dealership.createIndex({ brand: 1 })
Now queries like:
ealership.find({ brand: "Toyota" })

Bonus: Use explain()
To see if MongoDB is using the index:
db.users.find({ email: "test@example.com" }).explain("executionStats")

