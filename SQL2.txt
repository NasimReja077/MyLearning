Q1. Create a new database
ans: CREATE DATABASE SCHOOL;

Q2. Display all databases
SHOW DATABASES;

Q3. Switch database.
USE school;

Q4. Drop a database
DROP DATABASE test;

Q5. Create a database, only if it does not already exist.
CREATE DATABASE IF NOT EXISTS test_1;

Q6. Drop the database ,only if it exists.
DROP DATABASE IF EXISTS test_1;

Q7. Drop multiple databases:
DROP DATABASE test_2, test_3;

Q8. Create a table
CREATE TABLE student (
    S_ID INT NOT NULL PRIMARY KEY,
    S_NAME VARCHAR(255) NOT NULL,
    S_AGE INT,
    S_CLASS INT,
    S_CITY VARCHAR(255),
    S_PHONE VARCHAR(20)
);

CREATE TABLE Teachers (
    T_ID INT NOT NULL PRIMARY KEY,
    T_NAME VARCHAR(255) NOT NULL,
    T_AGE INT,
    T_CITY VARCHAR(255),
    T_PHONE VARCHAR(20),
    T_SALARY DECIMAL(10, 2)
);

Q9. Show all tables in the current database.
SHOW TABLES;

Q10. Describe the structure of the student table.
DESC student;

Q11. Insert 6 records into the table.

INSERT INTO student (S_ID, S_NAME, S_AGE, S_CLASS, S_CITY, S_PHONE)
VALUES
    (1, 'Nasim', 20, 12, 'Kolkata', '1234567890'),
    (2, 'Reja', 18, 10, 'Kolkata', '1234567898'),
    (3, 'Joy', 19, 11, 'Kolkata', '9631237893'),
    (4, 'Alex', 20, 12, 'Hyderabad', '7891234560'),
    (5, 'Bob', 17, 9, 'Mumbai', '1237898520'),
    (6, 'Mew', 18, 11, 'Bengaluru', '1934667890');


INSERT INTO Teachers (T_ID, T_NAME, T_AGE, T_CITY, T_PHONE, T_SALARY)
VALUES
    (101, 'Alice Smith', 35, 'New York', '123-456-7890', 60000.00),
    (102, 'Bob Johnson', 42, 'Los Angeles', '987-654-3210', 75000.00),
    (103, 'Charlie Brown', 28, 'Chicago', '555-111-2222', 50000.00),
    (104, 'Diana Prince', 50, 'Houston', '777-888-9999', 85000.00),
    (105, 'Eve Adams', 30, 'Miami', '333-444-5555', 62000.00),
    (106, 'Frank White', 45, 'Seattle', '999-888-7777', 70000.00),
    (107, 'Grace Lee', 33, 'Dallas', '222-333-4444', 68000.00);


SHOW TABLES;

Q12. Display all records from the student & teachers table.
SELECT * FROM student;
SELECT * FROM teachers;

Q13. Describe the structure of the teachers table.
DESC teachers;


Create Sub-Tables (Derived Tables)
--
creat subtable 

Q14. Create a table KolkataStudents with students only from Kolkata.

CREATE TABLE KolkataStudents AS
SELECT * FROM student
WHERE S_CITY = "Kolkata";

Q15. Create a table SeniorClassStudents with class 12 or higher students, selecting specific columns.

CREATE TABLE SeniorClassStudents AS
SELECT S_ID, S_NAME, S_CLASS, S_PHONE FROM student
WHERE S_CLASS >=12;

Q16. Create a table C10StudentsContact with only class 10 students and their contact info.

CREATE TABLE C10StudentsContact AS
SELECT S_ID, S_NAME, S_PHONE FROM student
WHERE S_CLASS = 10;

Q17. Create a table HighSalaryTeachers with teachers earning â‚¹70,000 or more.

CREATE TABLE HighSalaryTeachers AS
SELECT T_ID, T_NAME, T_AGE, T_PHONE FROM teachers
WHERE T_SALARY >= 70000.00;

Q18. Create a table ExpertTeachers with teachers older than 40 years.

CREATE TABLE ExpertTeachers AS
SELECT T_ID, T_NAME, T_PHONE FROM teachers
WHERE T_AGE >40;

Q19. Show all tables in the database again to verify subtables.
SHOW TABLES;



Q20. Rename table student to StudentsTable.
ALTER TABLE student RENAME TO StudentsTable;

Q21. Rename column name to full_name in table CUSTOMERS.
ALTER TABLE CUSTOMERS RENAME COLUMN name to full_name;

ALTER TABLE studentstable CHANGE COLUMN S_NAME TO S_FULLNAME VARCHAR(255);

ALTER TABLE studentstable CHANGE COLUMN S_NAME  S_FULLNAME VARCHAR(255);

Q22. Add a new column DOB of type INT to students.
ALTER TABLE students ADD DOB INT;


Q23. Update DOB for S_ID = 1.
UPDATE students 
SET DOB = 20040516 
WHERE S_ID = 1;

Q24. Update DOB for multiple S_IDs using CASE statement.
UPDATE students
SET DOB = CASE S_ID
WHEN 2 THEN 20050901
WHEN 3 THEN 20060521
WHEN 4 THEN 20040911
WHEN 5 THEN 20051007
WHEN 6 THEN 20070307
END
WHERE S_ID IN (2,3,4,5,6);

Q25. Drop column Email from students.
ALTER TABLE students 
DROP COLUMN Email;


Q26.Modify datatype of a column (generic syntax).
LTER TABLE table_name
MODIFY COLUMN column_name datatype;

Q27.Drop table
DROP TABLE CUSTOMERS;

DROP TABLE IF EXISTS CUSTOMERS;

Q28. Display all rows from students.
SELECT * FROM students;

Q29. Delete a student where
DELETE FROM students WHERE S_FULLNAME = 'Reja';

DELETE * FROM GFG_Employees; 

Q30. Delete rows from CUSTOMERS where name is 'Komal' or address is 'Mumbai'.
DELETE FROM CUSTOMERS 
WHERE NAME='Komal' OR ADDRESS='Mumbai';

Q31.Truncate all data from CUSTOMERS table.
TRUNCATE TABLE CUSTOMERS;

-------------------
The SQL Clause

SELECT * FROM teachers WHERE T_AGE <= 40;


SELECT T_ID, T_NAME, T_AGE, T_PHONE FROM teachers WHERE T_CITY = 'KOLKATA';


CREATE TABLE KolkataTeachers AS
SELECT T_ID, T_NAME, T_PHONE FROM teachers
WHERE T_CITY = "Kolkata";


SELECT * FROM Teachers WHERE NOT T_CITY = 'New York';

SELECT * FROM teachers WHERE T_AGE BETWEEN 30 AND 45;

SELECT * FROM teachers WHERE T_AGE IN (25,30);

SELECT T_NAME
FROM Teachers
WHERE T_NAME LIKE 'B%';

SELECT T_NAME, T_CITY
FROM Teachers
WHERE T_CITY = 'New York' OR T_CITY = 'Chicago';

UPDATE Teachers SET T_SALARY = 53000.00 WHERE T_CITY = 'Chicago';

UPDATE teachers SET T_NAME = 'Nasim' WHERE T_CITY = 'Chicago' ;

DELETE FROM teachers WHERE T_AGE <= 25;


// The SQL ORDER BY Clause

SELECT * FROM teachers ORDER BY T_NAME ASC;
SELECT * FROM teachers ORDER BY T_NAME DESC;

SELECT * FROM teachers ORDER BY T_AGE ASC, T_SALARY DESC;

SELECT * FROM teachers 
WHERE T_AGE <=45 ORDER BY T_NAME DESC;

SELECT T_ID,T_NAME,T_SALARY FROM teachers ORDER BY T_NAME LIMIT 3;


SELECT T_NAME, T_AGE, T_CITY
FROM Teachers
WHERE T_CITY = 'New York'
ORDER BY T_AGE ASC;

SELECT T_CITY, AVG(T_SALARY) AS AverageSalary
FROM Teachers
GROUP BY T_CITY
ORDER BY AverageSalary DESC;

SELECT T_NAME, T_AGE
FROM Teachers
ORDER BY T_AGE DESC
LIMIT 3;

SELECT T_ID, T_NAME
FROM Teachers
ORDER BY T_NAME ASC
LIMIT 2, 3;
----------------------
Pattern	Meaning
'a%'	Match strings that start with 'a'

'%a'	Match strings with end with 'a'

'a%t'	Match strings that contain the start with 'a' and end with 't'.

'%wow%'	Match strings that contain the substring 'wow' in them at any position.

'_wow%'	Match strings that contain the substring 'wow' in them at the second position.

'_a%'	Match strings that contain 'a' at the second position.

'a_ _%'	Match strings that start with 'a and contain at least 2 more characters.

-------------------
UNION

SELECT T_NAME AS Name, T_CITY AS City
FROM teachers
UNION
SELECT S_FULLNAME AS Name, S_CITY AS City
FROM students;

SELECT T_NAME AS NAME, T_CITY AS CITY
FROM teachers
UNION ALL 
SELECT S_FULLNAME AS NAME, S_CITY AS CITY
FROM students;

SELECT T_NAME AS CONTACTNAME, T_PHONE AS PHONENUMBER
FROM teachers
WHERE T_CITY = 'Kolkata'
UNION ALL
SELECT S_FULLNAME AS CONTACTNAME, S_PHONE AS PHONENUMBER
FROM students
WHERE S_CITY = 'Kolkata';



SELECT T_CITY FROM teachers
UNION
SELECT S_CITY FROM students
ORDER BY CITY;
OR--
SELECT T_CITY AS City FROM teachers
UNION
SELECT S_CITY AS City FROM students
ORDER BY City;


-----------
SQL Aggregate functions

SELECT COUNT(*) AS TOTAL_TEACHERS
FROM teachers;

SELECT COUNT(T_AGE) AS TEACHERS_AGE
FROM Teachers;

SELECT COUNT(*) AS KOLKATA_STUDENTS FROM students WHERE S_CITY = 'Kolkata';


SELECT T_CITY, COUNT(T_ID) AS NUMBER_OF_TEACHERS_IN_CITY
FROM teachers
GROUP BY T_CITY;


SELECT S_CLASS, COUNT(S_ID) AS NUMBER_OF_STUDENT_IN_CLASS
FROM students
GROUP BY S_CLASS;


SELECT T_CITY, COUNT(T_ID) AS NUMBEROFTEACHERS
FROM teachers
GROUP BY T_CITY
HAVING COUNT(T_ID) > 1;


SELECT AVG(T_SALARY) AS AverageTeacherSalary
FROM Teachers;

SELECT AVG(T_SALARY) AS AverageSalaryNewYork
FROM Teachers
WHERE T_CITY = 'New York';

SELECT T_CITY, AVG(T_SALARY) AS AverageSalaryPerCity
FROM Teachers
GROUP BY T_CITY;

